# def duplicar(funcao):
#     def envelope(*args, **kwargs):
#         print('Faz algo antes de executar a função')
#         funcao(*args, **kwargs)
#         funcao(*args, **kwargs)
#         print('Faz algo depois de executar a função')

#     return envelope

# @duplicar
# def aprender(tecnologia):
#     print(f'Estou aprendendo {tecnologia}')

# aprender("Python")

# print(aprender)
# def duplicar(funcao):
#     def envolope(*args, **kwargs):
#         funcao(*args, **kwargs)
#         return funcao(*args, **kwargs)
    
#     return envolope

# @duplicar
# def aprender(tecnologia):
#     print(f'Estou aprendendo {tecnologia}')
#     return tecnologia.upper()

# tecnologia = aprender("Python")


###
# CÓDIGO COM ERRO
###

class MeuIterador():
    def __init__(self, numeros:list[int]):
        self.numeros = numeros
        self.contador = 0

    def __iter__(self):
        return self

    def __next__(self):
        self.contador += 1
        return self.numeros[self.contador]*2
        raise StopIteration

for i in MeuIterador(numeros=[1, 2, 3]):
    print(i)



# class MeuIterador():
#     def __init__(self, numeros:list[int]):
#         self.numeros = numeros
#         self.contador = 0

#     def __iter__(self):
#         return self

#     def __next__(self):
#         try:
#             numero = self.numeros[self.contador]
#             self.contador += 1
#             return numero * 2
#         except IndexError:
#             raise StopIteration

# for i in MeuIterador():
#     print(i)

'''
 Desafio:

 Implementar as seguintes funcionalidades no sistema:

 - Decorador de Log:
Implemente um decorador que seja aplicado a todas as funções de transações (depósito, saque, criação de conta, etc).
Esse decorador deve registrar (printar) a data e hora de cada transação, bem como o tipo de transação.
 
 - Gerador de relatórios
Crie um gerador que permita iterar sobre as transações de uma cotna e retornar, uma a uma, as transações que foram realizadas.
Esse gerador deve também te rum forma de filtrar as transações baseado em seu tipo.

 - Iterador personalizado
Implementear um iterador personalizado ContaIterador que permita iterar sobre todas as contas do banco, retornando informações básicas de cada conta (número, saldo atual, etc.)
'''